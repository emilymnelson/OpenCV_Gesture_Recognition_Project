# -*- coding: utf-8 -*-
"""VI Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwrMh2pe-jhENXH_71qZiX-9KeltEMMO
"""

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow

##Below is the sequence of steps for the first four images###

##import images##
cenCfist121 = cv.imread('/content/1.2.1cenCfist.jpg')
cenCfist122 = cv.imread('/content/1.2.2cenCfist.jpg')
uppRsplay123 = cv.imread('/content/1.2.3uppRsplay.jpg')
uppRsplay124 = cv.imread('/content/1.2.4uppRsplay.jpg')

##copy for drawing contour##
newImage1 = cenCfist121.copy()
newImage2 = cenCfist122.copy()
newImage3 = uppRsplay123.copy()
newImage4 = uppRsplay124.copy()

##reduce color to grayscale##
cenCfist121 = cv.cvtColor(cenCfist121, cv.COLOR_BGR2GRAY)
cenCfist122 = cv.cvtColor(cenCfist122, cv.COLOR_BGR2GRAY)
uppRsplay123 = cv.cvtColor(uppRsplay123, cv.COLOR_BGR2GRAY)
uppRsplay124 = cv.cvtColor(uppRsplay124, cv.COLOR_BGR2GRAY)


##reduce to binary##
ret, cenCfist121 = cv.threshold(cenCfist121, 70, 300, cv.THRESH_BINARY)
ret, cenCfist122 = cv.threshold(cenCfist122, 90, 300, cv.THRESH_BINARY)
ret, uppRsplay123 = cv.threshold(uppRsplay123, 70, 300, cv.THRESH_BINARY)
ret, uppRsplay124 = cv.threshold(uppRsplay124, 70, 300, cv.THRESH_BINARY)

##find contours in the image##
contours1, hierarchy1 = cv.findContours(cenCfist121, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
contours2, hierarchy2 = cv.findContours(cenCfist122, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
contours3, hierarchy3 = cv.findContours(uppRsplay123, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
contours4, hierarchy4 = cv.findContours(uppRsplay124, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

##create empty array to append the area of each contour##
all_areas1 = []
all_areas2 = []
all_areas3 = []
all_areas4 = []

##loop through the arrays of contours and append the area of each##

for cnt in contours1:
  area = cv.contourArea(cnt)
  all_areas1.append(area)

for cnt in contours2:
  area = cv.contourArea(cnt)
  all_areas2.append(area)

for cnt in contours3:
  area= cv.contourArea(cnt)
  all_areas3.append(area)

for cnt in contours4:
  area= cv.contourArea(cnt)
  all_areas4.append(area)



##sort the contours##

sorted_contours1 = sorted(contours1, key=cv.contourArea, reverse= True)
sorted_contours2 = sorted(contours2, key=cv.contourArea, reverse= True)
sorted_contours3 = sorted(contours3, key=cv.contourArea, reverse= True)
sorted_contours4 = sorted(contours4, key=cv.contourArea, reverse= True)

##find the largest contour##
largest_item1 = sorted_contours1[0]
largest_item2 = sorted_contours2[0]
largest_item3 = sorted_contours3[0]
largest_item4 = sorted_contours4[0]

##draw on original image##
cv.drawContours(newImage1, sorted_contours1, 0, (0,255,0), 3)
cv.drawContours(newImage2, sorted_contours2, 0, (0,255,0), 3)
cv.drawContours(newImage3, sorted_contours3, 0, (0,255,0), 3)
cv.drawContours(newImage4, sorted_contours4, 0, (0,255,0), 3)


##approximate the shape of the contour##
approx1 = cv.approxPolyDP(largest_item1,0.01*cv.arcLength(cnt,True),True)

approx2 = cv.approxPolyDP(largest_item2,0.01*cv.arcLength(cnt,True),True)

approx3 = cv.approxPolyDP(largest_item3,0.01*cv.arcLength(cnt,True),True)

approx4 = cv.approxPolyDP(largest_item4,0.01*cv.arcLength(cnt,True),True)


##find x/y coordinates##
M1 = cv.moments(approx1)
cX1 = int(M1["m10"] / M1["m00"])
cY1 = int(M1["m01"] / M1["m00"])
M2 = cv.moments(approx2)
cX2 = int(M2["m10"] / M2["m00"])
cY2 = int(M2["m01"] / M2["m00"])
M3 = cv.moments(approx3)
cX3 = int(M3["m10"] / M3["m00"])
cY3 = int(M3["m01"] / M3["m00"])
M4 = cv.moments(approx4)
cX4 = int(M4["m10"] / M4["m00"])
cY4 = int(M4["m01"] / M4["m00"])


##function to write text on image##

def put_text(image, approx, cX, cY):

  new_image = cv.putText(image, 'fist', (250, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'splay', (250, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'palm', (250, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)

  new_image = cv.putText(image, 'uppL', (600, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'cenL', (600, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'lowL', (600, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)

  new_image = cv.putText(image, 'uppC', (900, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'cenC', (900, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'lowC', (900, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)

  new_image = cv.putText(image, 'uppR', (1200, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'cenR', (1200, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)
  new_image = cv.putText(image, 'lowR', (1200, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 2, cv.LINE_AA)

  if len(approx) in range(1500, 2000):
    new_image = cv.putText(image, 'XXX', (40, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if len(approx) in range(3001, 4100):
    new_image = cv.putText(image, 'XXX', (40, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if len(approx) in range(2001, 3000):
    new_image = cv.putText(image, 'XXX', (40, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if len(approx) not in range(1500, 4100):
    new_image = cv.putText(image, 'UNKNOWN!!', (40, 450), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 0, 0), 6, cv.LINE_AA)




  if (0 < cX < 1008 ) & (  0 < cY < 1008 ):
    new_image = cv.putText(image, 'XXXX', (600, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 0 < cX < 1008 ) & ( 1009  < cY < 2016 ):
    new_image = cv.putText(image, 'XXXX', (600, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 0 < cX < 1008 ) & ( 2017  < cY < 3024 ):
    new_image = cv.putText(image, 'XXXX', (600, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)


  if ( 1009 < cX < 2016 ) & ( 0  < cY < 1008 ):
    new_image = cv.putText(image, 'XXXX', (900, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 1009 < cX < 2016 ) & ( 1009  < cY < 2016 ):
    new_image = cv.putText(image, 'XXXX', (900, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 1009 < cX < 2016 ) & ( 2017  < cY < 3024 ):
    new_image = cv.putText(image, 'XXXX', (900, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)

  if ( 2017 < cX < 3024 ) & ( 0  < cY < 1008 ):
    new_image = cv.putText(image, 'XXXX', (1200, 150), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 2017 < cX < 3024 ) & ( 1009  < cY < 2016 ):
    new_image = cv.putText(image, 'XXXX', (1200, 250), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)
  if ( 2017 < cX < 3024 ) & ( 2017  < cY < 3024 ):
    new_image = cv.putText(image, 'XXXX', (1200, 350), cv.FONT_HERSHEY_SIMPLEX, 3, (255, 255, 255), 6, cv.LINE_AA)



  return image




image_Test1 = put_text(cenCfist121, approx1, cX1, cY1)
image_Test2 = put_text(cenCfist122, approx2, cX2, cY2)
image_Test3 = put_text(uppRsplay123, approx3, cX3, cY3)
image_Test4 = put_text(uppRsplay124, approx4, cX4, cY4)





### below is the same sequence of steps except for one single image, this is how I could test an individual image###

hand = cv.imread('/content/9.jpg')

newImage = hand.copy()

hand = cv.cvtColor(hand, cv.COLOR_BGR2GRAY)

ret, hand = cv.threshold(hand, 100, 300, cv.THRESH_BINARY)

contours, hierarchy = cv.findContours(hand, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

all_areas = []

for cnt in contours:
  area = cv.contourArea(cnt)
  all_areas.append(area)


sorted_contours = sorted(contours, key=cv.contourArea, reverse= True)

largest_item = sorted_contours[0]

cv.drawContours(newImage, sorted_contours, 0, (0,255,0), 3)

approx = cv.approxPolyDP(largest_item,0.01*cv.arcLength(cnt,True),True)

M1 = cv.moments(approx)
cX = int(M1["m10"] / M1["m00"])
cY = int(M1["m01"] / M1["m00"])


image = put_text(hand, approx, cX, cY)

#cv2_imshow(image)

col_diff = []

for i in range(44):
  col1 = bny1[:,i]
  col2 = bny1[:, column]

  if np.allclose(col1, col2):
    col_diff.append(0)
  else:
    col_diff.append(1)

  column = column - 1


print(sum(col_diff)/r_c)